// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Owl_Ops_Webserver.Model;

namespace Owl_Ops_Webserver.Migrations
{
    [DbContext(typeof(OwlDatabaseContext))]
    [Migration("20210524201129_AddIdentitySchema")]
    partial class AddIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.6");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Event", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(32)");

                    b.Property<long>("Importance")
                        .HasColumnType("tinyint");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Sensor_ID")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("Time")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.HasKey("ID");

                    b.HasIndex("Sensor_ID");

                    b.ToTable("Event");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Image", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("Image1")
                        .IsRequired()
                        .HasColumnType("blob")
                        .HasColumnName("Image");

                    b.Property<string>("Sensor_ID")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("Time")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.HasKey("ID");

                    b.HasIndex("Sensor_ID");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Measurement", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Sensor_ID")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.Property<byte[]>("Time")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("ID");

                    b.HasIndex("Sensor_ID");

                    b.ToTable("Measurement");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Sensor", b =>
                {
                    b.Property<string>("ID")
                        .HasColumnType("varchar(32)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(255)");

                    b.Property<byte[]>("End_Time")
                        .HasColumnType("datetime");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Secret")
                        .IsRequired()
                        .HasColumnType("varchar(64)");

                    b.Property<byte[]>("Up_Time")
                        .IsRequired()
                        .HasColumnType("datetime");

                    b.Property<string>("User_ID")
                        .IsRequired()
                        .HasColumnType("varchar(32)");

                    b.HasKey("ID");

                    b.HasIndex("User_ID");

                    b.ToTable("Sensor");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Owl_Ops_Webserver.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Event", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.Sensor", "Sensor")
                        .WithMany("Events")
                        .HasForeignKey("Sensor_ID")
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Image", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.Sensor", "Sensor")
                        .WithMany("Images")
                        .HasForeignKey("Sensor_ID")
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Measurement", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.Sensor", "Sensor")
                        .WithMany("Measurements")
                        .HasForeignKey("Sensor_ID")
                        .IsRequired();

                    b.Navigation("Sensor");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Sensor", b =>
                {
                    b.HasOne("Owl_Ops_Webserver.Model.User", "User")
                        .WithMany("Sensors")
                        .HasForeignKey("User_ID")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.Sensor", b =>
                {
                    b.Navigation("Events");

                    b.Navigation("Images");

                    b.Navigation("Measurements");
                });

            modelBuilder.Entity("Owl_Ops_Webserver.Model.User", b =>
                {
                    b.Navigation("Sensors");
                });
#pragma warning restore 612, 618
        }
    }
}
